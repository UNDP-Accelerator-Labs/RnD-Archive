import re
import os
import sys
from os import listdir, makedirs
from os.path import isfile, join, basename, splitext, exists
from urllib.parse import quote

basepath = './stories/pages/'

# Get base path from CLI arg or env var (e.g., from GitHub Actions)
basePath = (
    sys.argv[1]
    if len(sys.argv) > 1
    else os.getenv("BASE_PATH", "")
)

# Normalize basePath (leading slash, no trailing slash)
if basePath and not basePath.startswith("/"):
    basePath = "/" + basePath
if basePath.endswith("/"):
    basePath = basePath[:-1]

def getText(file):
    with open(file, 'r') as f:
        return f.read()

def getTitle(text):
    mdTitle = re.search(r'^#\s+.*', text, flags=re.MULTILINE).group()
    return re.sub(r'#\s+', '', mdTitle)

def getTags(text):
    tags = re.findall(r'\[\[.*:.*\]\]', text, flags=re.IGNORECASE)
    tags = [re.sub(r'[\[\]]*', '', tag) for tag in tags]
    tags = list(set(filter(lambda x: not x.split(':')[0].isnumeric() and x.split(':')[0] != 'audio', tags)))
    return tags

if __name__ == '__main__':
    onlyfiles = [file for file in listdir(basepath) if isfile(join(basepath, file)) and file != '.DS_Store']
    elements_in_stories = {}

    for file in onlyfiles:
        filename = splitext(basename(file))[0]
        text = getText(join(basepath, file))
        title = getTitle(text)
        tags = getTags(text)
        elements = list(set([tag.split(':')[0] for tag in tags]))

        for element in elements:
            if element not in elements_in_stories:
                elements_in_stories[element] = {}

            element_in_stories = elements_in_stories[element]
            eltags = [tag.split(':')[1] for tag in tags if tag.startswith(f"{element}:")]

            for tag in eltags:
                link = f"- [{title}]({basePath}/stories/?doc={quote(filename, safe='')})"
                if tag in element_in_stories:
                    element_in_stories[tag].append(link)
                else:
                    element_in_stories[tag] = [link]

    for element in elements_in_stories:
        elements = elements_in_stories[element]
        for tag in elements:
            docs = elements[tag]
            elementpath = './elements/generated/'
            if not exists(elementpath):
                makedirs(elementpath)
            elementfile = join(elementpath, f'{tag}.md')
            content = "<!-- !!DO NOT REMOVE!! start autogenerated hyperlinks -->\n"
            content += "## Related R&D Stories\n" + "\n".join(docs)
            content += "\n<!-- !!DO NOT REMOVE!! end autogenerated hyperlinks -->"
            content = f"# Associated stories\n\n{content}"

            with open(elementfile, 'w') as pipe:
                pipe.write(content)
