import re
from os import listdir, makedirs
from os.path import isfile, join, basename, splitext, exists

basepath = './stories/pages/'

def getText (file):
	f = open(file, 'r')
	return f.read()

def getTitle (text):
	mdTitle = re.search(r'^#\s+.*', text, flags = re.MULTILINE).group()
	return re.sub(r'#\s+', '', mdTitle)

def getTags (text):
	tags = re.findall(r'\[\[.*:.*\]\]', text, flags = re.IGNORECASE)
	tags = [re.sub(r'[\[\]]*', '', tag) for tag in tags]
	tags = list(set(list(filter(lambda x: x.split(':')[0].isnumeric() == False and x.split(':')[0] != 'audio', tags))))
	return tags

if __name__ == '__main__':
	onlyfiles = [file for file in listdir(basepath) if isfile(join(basepath, file)) and file != '.DS_Store']
	elements_in_stories = {}

	for file in onlyfiles:
		filename = splitext(basename(file))[0]
		text = getText(join(basepath, file))
		title = getTitle(text)
		tags = getTags(text)
		elements = list(set([tag.split(':')[0] for tag in tags]))

		for element in elements:
			if not element in elements_in_stories:
				elements_in_stories[element] = {}

			element_in_stories = elements_in_stories[element]

			eltags = [tag.split(':')[1] for tag in list(filter(lambda x: "{}:".format(element) in x, tags))]
			
			for tag in eltags:
				if tag in element_in_stories:
					element_in_stories[tag].append("- [{}](../stories/?doc={})".format(title, filename))
				else:
					element_in_stories[tag] = ["- [{}](../stories/?doc={})".format(title, filename)]

	for element in elements_in_stories:
		elements = elements_in_stories[element]
		for tag in elements:
			docs = elements[tag]
			# CREATE OR UPDATE FILES
			# elementpath = join('./elements', element)
			# elementpath = join(elementpath, 'pages')
			elementpath = './elements/generated/'
			if not exists(elementpath):
				makedirs(elementpath)
				# TO DO: COPY AN INSTANCE OF THE index.html FILE HERE
			elementfile = join(elementpath, '{}.md'.format(tag))
			content = "<!-- !!DO NOT REMOVE!! start autogenerated hyperlinks -->\n## Related R&D Stories\n{}\n<!-- !!DO NOT REMOVE!! end autogenerated hyperlinks -->".format('\n'.join(docs))
			# TO DO: ADD ASOCIATED ELEMENTS (COOCCURRING IN STORIES)

			# if exists(elementfile):
			# 	text = getText(elementfile)
			# 	content = re.sub(r'<!-- !!DO NOT REMOVE!! start autogenerated hyperlinks -->(.|\s)*<!-- !!DO NOT REMOVE!! end autogenerated hyperlinks -->', content, text, flags = re.MULTILINE)
			# 	print(content)
			# else:
			# 	content = "# {}\n\n{}".format(tag, content)
			content = "# Associated stories\n\n{}".format(content)

			with open(elementfile, 'w') as pipe:
				pipe.write(content)